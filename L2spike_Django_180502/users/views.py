from django.contrib import messages
from django.contrib.auth import login as auth_login,get_user_model
from django.utils.http import urlsafe_base64_decode
from django.utils.timezone import now
from django.utils.dateparse import parse_datetime
# from django.contrib.auth.tokens import default_token_generator
from .tokens import email_token_generator
from django.shortcuts import render, redirect
from django.db import IntegrityError
from django.contrib.auth.decorators import login_required

from .forms import UserRegisterForm
from users.models import Accounts, Characters
from .utils import send_activation_email

#–∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –µ–º–µ–π–ª
from django.contrib.auth.views import PasswordResetConfirmView,PasswordChangeView
from django.contrib.auth.models import User
from django.urls import reverse_lazy

import hashlib
import base64
from datetime import timedelta



def register(request):
    context = {
        'title': 'L2Spike ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Ä¢ Interlude ‚Ä¢ x50.000'
    }

    if request.method == "POST":
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            login = form.cleaned_data.get('login') or form.cleaned_data.get('username')
            password = form.cleaned_data.get('password1')
            email = form.cleaned_data.get('email')

            try:
                #–ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                existing_user = User.objects.filter(email__iexact=email, is_active=False).first()
                if existing_user:
                    sha_hash = hashlib.sha1(password.encode('utf-8')).digest()
                    encoded_password = base64.b64encode(sha_hash).decode('utf-8')

                    send_activation_email(request, existing_user)
                    request.session['encoded_password'] = encoded_password

                    messages.info(request, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
                    return render(request, 'users/send_email.html', {'email': email})


                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –≤ Accounts (–≤ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î)
                if not Accounts.objects.using('test').filter(login=login).exists():
                    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                    sha_hash = hashlib.sha1(password.encode('utf-8')).digest()
                    encoded_password = base64.b64encode(sha_hash).decode('utf-8')

                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django
                    user = form.save(commit=False)
                    user.is_active = False
                    user.save()

                    #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ email
                    send_activation_email(request, user)

                    #–ó–∞—Å–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–º–µ–π–ª–∞
                    request.session['last_activation_email_sent'] = now().isoformat()

                    #–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # auth_login(request, user)

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Accounts
                    # Accounts.objects.using('test').create(
                    #     login=login,
                    #     password=encoded_password,
                    #     # email=form.cleaned_data.get('email')
                    # )

                    # messages.success(request, f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ email –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.')
                    # return redirect('profile')

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–µ—Å—Å–∏—é (–Ω–∞ –≤—Ä–µ–º—è)
                    request.session['encoded_password'] = encoded_password

                    return render(request, 'users/send_email.html', {'email': user.email})

                else:
                    messages.error(request, f'–õ–æ–≥–∏–Ω {login} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
                    return redirect('reg')
                

            except IntegrityError:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}.')
                return redirect('reg')
        
        else:
            # –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{error}")


    else:
        form = UserRegisterForm()
    context['form'] = form  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    # return render(request, 'users/registration.html', {'form': form})
    return render(request, 'users/registration.html', context)



#–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏
def resend_activation_email(request):
    if request.method == "POST":
        email = request.POST.get('email')
        user = User.objects.filter(email__iexact=email, is_active=False).first()

        if not user:
            messages.error(request, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return redirect('reg')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã (5 –º–∏–Ω—É—Ç)
        last_sent = request.session.get('last_activation_email_sent')
        if last_sent:
            last_sent_dt = parse_datetime(last_sent)
            if now() - last_sent_dt < timedelta(minutes=5):
                remaining = 300 - int((now() - last_sent_dt).total_seconds())
                minutes, seconds = divmod(remaining, 60)
                messages.warning(request, f"–í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {minutes} –º–∏–Ω {seconds} —Å–µ–∫.")
                return render(request, 'users/send_email.html', {'email': email})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        send_activation_email(request, user)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        request.session['last_activation_email_sent'] = now().isoformat()

        messages.success(request, f"–ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}.")
        return render(request, 'users/send_email.html', {'email': email})

    return redirect('reg')




def activate_account(request, uidb64, token):
    User = get_user_model()
    try:
        uid = urlsafe_base64_decode(uidb64).decode()
        user = User.objects.get(pk=uid)
    except (User.DoesNotExist, ValueError, TypeError, OverflowError):
        user = None

    # if user and default_token_generator.check_token(user, token):
    if user and email_token_generator.check_token(user, token):
        user.is_active = True
        user.save()

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ test-–ë–î —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å:
        # sha_hash = hashlib.sha1(user.password.encode('utf-8')).digest()
        # encoded_password = base64.b64encode(sha_hash).decode('utf-8')

        # –ë–µ—Ä–µ–º —Ö–µ—à –∏–∑ —Å–µ—Å—Å–∏–∏
        encoded_password = request.session.get('encoded_password')

        if encoded_password:
            Accounts.objects.using('test').create(
                login=user.username,
                password=encoded_password,
            )
            # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            del request.session['encoded_password']
        else:
            messages.warning(request, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")

        # –ê–≤—Ç–æ-–ª–æ–≥–∏–Ω
        auth_login(request, user)

        messages.success(request, f"–ê–∫–∫–∞—É–Ω—Ç {user.username} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
        return redirect('profile')
    else:
        messages.error(request, '–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.')
        return redirect('reg')


@login_required
def profile(request):
    user = request.user
    # print("Django username:", user.username)  # ‚Üê –ü—Ä–æ–≤–µ—Ä–∫–∞
    
    try:
        #–ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –≤—Ç–æ—Ä–æ–π –ë–î(test) –ø–æ –ª–æ–≥–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django
        account = Accounts.objects.using('test').get(login=user.username)
        # print("Accounts login:", account.login)  # ‚Üê –ü—Ä–æ–≤–µ—Ä–∫–∞
    except Accounts.DoesNotExist:
        account = None

    characters = []
    if account:
        #–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π,—Å–≤—è–∑–∞–Ω—ã—Ö —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º(—Ç–æ–∂–µ –∏–∑ –≤—Ç–æ—Ä–æ–π –ë–î)
        characters = Characters.objects.using('test').filter(account_name=account.login)

    return render(request, 'users/profile.html',{
        'user': user,
        'account': account,
        'characters': characters,
    })



#–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π(—á–µ—Ä–µ–∑ –µ–º–µ–π–ª)
class CustomPasswordResetConfirmView(PasswordResetConfirmView):
    success_url = reverse_lazy('login')

    def form_valid(self, form):
        response = super().form_valid(form)

        # üëá –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ Django ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.user

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ test-–±–∞–∑–µ (–º–æ–¥–µ–ª—å Accounts)
            login = user.username  # –∏—Å–ø–æ–ª—å–∑—É–µ—à—å login –∫–∞–∫ username

            new_password = form.cleaned_data.get('new_password1')
            sha_hash = hashlib.sha1(new_password.encode('utf-8')).digest()
            encoded_password = base64.b64encode(sha_hash).decode('utf-8')

            updated = Accounts.objects.using('test').filter(login=login).update(password=encoded_password)

            if updated == 0:
                messages.warning(self.request, f'–í–Ω–∏–º–∞–Ω–∏–µ: –ª–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.')
            else:
                messages.success(self.request, '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–≥—Ä–æ–π.')

        except Exception as e:
            messages.error(self.request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ: {e}')

        return response
    


#–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π(—á–µ—Ä–µ–∑ –õ–ö)
class CustomPasswordChangeView(PasswordChangeView):
    template_name = 'users/password_change.html'  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —à–∞–±–ª–æ–Ω—É
    success_url = reverse_lazy('password_change_done')  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è

    def form_valid(self, form):
        response = super().form_valid(form)

        user = self.request.user
        login = user.username
        new_password = form.cleaned_data.get('new_password1')

        try:
            sha_hash = hashlib.sha1(new_password.encode('utf-8')).digest()
            encoded_password = base64.b64encode(sha_hash).decode('utf-8')

            updated = Accounts.objects.using('test').filter(login=login).update(password=encoded_password)

            if updated == 0:
                messages.warning(self.request, f'–í–Ω–∏–º–∞–Ω–∏–µ: –ª–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            else:
                messages.success(self.request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–≥—Ä–æ–π.')

        except Exception as e:
            messages.error(self.request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}')

        return response