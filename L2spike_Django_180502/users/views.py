from django.contrib import messages
from django.contrib.auth import login as auth_login
from django.shortcuts import render, redirect
from django.db import IntegrityError
from django.contrib.auth.decorators import login_required

from .forms import UserRegisterForm
from users.models import Accounts, Characters

#–∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –µ–º–µ–π–ª
from django.contrib.auth.views import PasswordResetConfirmView
# from django.contrib.auth.models import User
from django.urls import reverse_lazy
# from django.utils.encoding import force_str
# from django.utils.http import urlsafe_base64_decode

import hashlib
import base64



class CustomPasswordResetConfirmView(PasswordResetConfirmView):
    success_url = reverse_lazy('login')  # –∏–ª–∏ –∫—É–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ

    def form_valid(self, form):
        response = super().form_valid(form)

        # üëá –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ Django ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.user

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ test-–±–∞–∑–µ (–º–æ–¥–µ–ª—å Accounts)
            login = user.username  # –∏—Å–ø–æ–ª—å–∑—É–µ—à—å login –∫–∞–∫ username

            new_password = form.cleaned_data.get('new_password1')
            sha_hash = hashlib.sha1(new_password.encode('utf-8')).digest()
            encoded_password = base64.b64encode(sha_hash).decode('utf-8')

            updated = Accounts.objects.using('test').filter(login=login).update(password=encoded_password)

            if updated == 0:
                messages.warning(self.request, f'–í–Ω–∏–º–∞–Ω–∏–µ: –ª–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.')
            else:
                messages.success(self.request, '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–≥—Ä–æ–π.')

        except Exception as e:
            messages.error(self.request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ: {e}')

        return response



def register(request):
    context = {
        'title': 'L2Spike ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Ä¢ Interlude ‚Ä¢ x50.000'
    }

    if request.method == "POST":
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            login = form.cleaned_data.get('login') or form.cleaned_data.get('username')
            password = form.cleaned_data.get('password1')

            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –≤ Accounts (–≤ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î)
                if not Accounts.objects.using('test').filter(login=login).exists():
                    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                    sha_hash = hashlib.sha1(password.encode('utf-8')).digest()
                    encoded_password = base64.b64encode(sha_hash).decode('utf-8')

                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django
                    user = form.save()

                    #–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    auth_login(request, user)

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Accounts
                    Accounts.objects.using('test').create(
                        login=login,
                        password=encoded_password,
                        # email=form.cleaned_data.get('email')
                    )

                else:
                    messages.error(request, f'–õ–æ–≥–∏–Ω {login} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
                    return redirect('reg')
                

            except IntegrityError:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}.')
                return redirect('reg')

            messages.success(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
            return redirect('profile')
        
        
        else:
            # –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{error}")


    else:
        form = UserRegisterForm()
    context['form'] = form  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    # return render(request, 'users/registration.html', {'form': form})
    return render(request, 'users/registration.html', context)


@login_required
def profile(request):
    user = request.user
    # print("Django username:", user.username)  # ‚Üê –ü—Ä–æ–≤–µ—Ä–∫–∞
    
    try:
        #–ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –≤—Ç–æ—Ä–æ–π –ë–î(test) –ø–æ –ª–æ–≥–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django
        account = Accounts.objects.using('test').get(login=user.username)
        # print("Accounts login:", account.login)  # ‚Üê –ü—Ä–æ–≤–µ—Ä–∫–∞
    except Accounts.DoesNotExist:
        account = None

    characters = []
    if account:
        #–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π,—Å–≤—è–∑–∞–Ω—ã—Ö —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º(—Ç–æ–∂–µ –∏–∑ –≤—Ç–æ—Ä–æ–π –ë–î)
        characters = Characters.objects.using('test').filter(account_name=account.login)

    return render(request, 'users/profile.html',{
        'user': user,
        'account': account,
        'characters': characters,
    })
