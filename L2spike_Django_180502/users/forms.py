from django import forms
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.contrib.auth.forms import (
    UserCreationForm,
    AuthenticationForm,
    PasswordResetForm,
    SetPasswordForm,
    PasswordChangeForm
    )


class UserRegisterForm(UserCreationForm):
    login = forms.CharField(
        label = '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω',
        required = True,
        max_length = 14,
        # help_text ='–ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã: @,/,&,!,?',
        widget = forms.TextInput(attrs={'class':'input-field', 'placeholder':'–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'})
    )
    email = forms.EmailField(
        label = '–í–≤–µ–¥–∏—Ç–µ Email',
        required = True,
        #–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç —ç–º–µ–∏–ª
        max_length = 100,
        widget = forms.TextInput(attrs={'class':'input-field', 'placeholder':'–í–≤–µ–¥–∏—Ç–µ Email'})
    )
    password1 = forms.CharField(
        label = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
        required = True,
        strip=False,
        # help_text= '–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω–º –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ø—Ä–æ—Å—Ç—ã–º',
        widget = forms.PasswordInput(attrs={'class':'input-field', 'placeholder':'–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å', 'data-password-toggle':'true'})
    )
    password2 = forms.CharField(
        label = '–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
        required = True,
        strip=False,
        widget = forms.PasswordInput(attrs={'class':'input-field', 'placeholder':'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å', 'data-password-toggle':'true'})
    )


    class Meta:
        model = User
        fields = ['login','email','password1','password2']


    # def clean_email(self):
    #     email = self.cleaned_data.get('email')
    #     if User.objects.filter(email__iexact=email).exists():
    #         raise ValidationError('–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.')
    #     return email

    #—Ç–µ–ø–µ—Ä—å email —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    def clean_email(self):
        email = self.cleaned_data.get('email')
        existing_user = User.objects.filter(email__iexact=email, is_active=True).first()
        if existing_user:
            raise ValidationError('–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.')
        return email

    
    def save(self, commit=True):
        user = super(UserCreationForm, self).save(commit=False)
        user.username = self.cleaned_data['login']  # üëà –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        user.email = self.cleaned_data['email']
        if commit:
            user.save()
        return user
    

#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å)
class UserLoginForm(AuthenticationForm):
    username = forms.CharField(
        label ='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω',
        required = True,
        max_length = 14,
        widget = forms.TextInput(attrs={'class':'input-field','placeholder':'–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'})
    )

    password = forms.CharField(
        label = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
        required = True,
        strip=False,
        widget = forms.PasswordInput(attrs={'class':'input-field','placeholder':'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'data-password-toggle':'true'})
    )

#–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å-–ª—è
class UserPasswordResetForm(PasswordResetForm):
    email = forms.EmailField(
        label = '–í–≤–µ–¥–∏—Ç–µ Email',
        required = True,
        max_length = 100,
        widget = forms.TextInput(attrs={'class':'input-field', 'placeholder':'–í–≤–µ–¥–∏—Ç–µ Email'})
    )
        

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if not User.objects.filter(email__iexact=email, is_active=True).exists():
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return email
        

#–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å-–ª—è
class UserSetPasswordForm(SetPasswordForm):
        new_password1 = forms.CharField(
            label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
            required = True,
            strip = False,
            widget = forms.PasswordInput(attrs={
                'class': 'input-field',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
                'data-password-toggle': 'true'
            }),
        )

        new_password2 = forms.CharField(
            label='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
            required= True,
            strip=False,
            widget=forms.PasswordInput(attrs={
                 'class': 'input-field',
                 'placeholder': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
                 'data-password-toggle': 'true'
            }),
        )

#–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å-–ª—è –∏–∑ –õ–ö(–±–µ–∑ —ç–º–µ–π–ª–∞)
class UserPasswordChangeForm(PasswordChangeForm):
    old_password = forms.CharField(
        label="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å",
        required= True,
        strip=False,
        widget=forms.PasswordInput(attrs={'class': 'input-field', 'placeholder': '–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å','data-password-toggle': 'true'})
    )
    new_password1 = forms.CharField(
        label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
        required= True,
        strip=False,
        widget=forms.PasswordInput(attrs={'class': 'input-field', 'placeholder': '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å','data-password-toggle': 'true'})
    )
    new_password2 = forms.CharField(
        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
        required= True,
        strip=False,
        widget=forms.PasswordInput(attrs={'class': 'input-field', 'placeholder': '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å','data-password-toggle': 'true'})
    )